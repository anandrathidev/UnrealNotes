Unreal : Tool to code , Low language , BP scripting , Networking nativly availaible.
BP has State Engine . Src code -> Build tools -> Build-> cook -> pack 


1. Modules : Bunch of files organized together as one feature ,  makes compilation easy specific module which changed.Pramotes re usablity 
2. Plugins : Decouped from code , live in engine or project .  activate / Decactivate at game.
3. Platformrs : isoloate platform specific feaure [ new experimental]

BaseTypes : Basic Data types & Structures ,  UObject and Actors are pillars for programming , Other useful data types.
Enums : UENUMS top of c++ enums metadata example Enum(BluwprintType) enu, {A,B} 
Strings Fstring basic ones, Fname Unqie names for actors , Ftext - Localization , gather all Ftext ans localize it in actors, BP etc
Collection: TMap, TArray  TSet can't have array of array,

UOBject:   Most important ones are UObject Hanngeled by GC. Actors are inherited from UObject 

Transform types:  FVectors, Frotator Fquant Ftransform 
Actor Base  ones : they recive calls , events , can be transformed 
                  UObject  , Actor <- Components can be attached to  Actors ()
                  Actors are memory managed by smart pointers. 
                  Actor &  Components can provide functionality 
                  Components = Mesh , Damagable , Spring Arm 
                  Life cycle of Actors : Levels , Spwend from Code/Blueprint . Managed by Smart pointers 
                  BeginPlay
                  InitializeComponents
                  EndPlay
                  PendingKill [Common error Actor must not be accesses if ib this state of life cycle]
                  BP Lifecycle                 
                  Creating :  Spawned by code , GC will destroy smart pointer.
                  
BasicData Types:  Curevs data inetpolation movement between actors, 
                FDataTables, FTableRows 
                DataAssets,
                

Memory management: Loading assets options e.g ref from code as soon as code is loaded / ref to assset ask streaming system to load async.
                   GC - Auto mem for UPROPERTY members, configurable based on GC and reflection 
                   Placed or Spawned : Actors can be conrolled , if placed in map , when map is unloaded auto GC. 
                   Refrence chains.
               
                 


MACROS : UFUNCTION , UPROPERTY, UCLASS, GENERATEDBY , 
Inside macros there are specifiers : e.g BlueprintReadOnly , BlueprintReadWrite, BluwPrintCallable :UFUNCTION
Expose functinality for designer.



Game Play Framework  : Control Game Flow, Having Charachters in game , Player to control any kind of interaction in the game.
                       GameMode : Class that defines the flow of execution . Only on Server. Lifetime depends on Level . Client cant access GameMode.
                       GameState : Aux xclass for GameMode that exisist in server and clients. good for sharing global info and functions 
                                  all game info is in  GameMode, if it needs to be shared with clients then it is done via GameState. e.g enemy indo in GameMode and mark it as replicate.  Replication is feture of UEEngine.
                       PlayerState:  Aux class for the PlayerController that exists in all server and clients. good to share player info among every client. PlayerState -> PlayerController -> Pawn/Charachter
                       PlayerController: As the brain of pawn input is interpreted as actions . Controller can easily posses or unpossess Pawns exists on owner client server . PlayerController can be driven by input of player can be other controller like AI Controll like Behaviour trees.
                       Player controller can tell AI Controller to control groups.
                       Only the player client will have PlayerController in the game. Can possess groups of actors , 
                       GameInstance : Life time of execution of the app till app is closed. will persiist info between level change. 
                       
                       
                       Go to  Project settings -> Engine ->  Input : see how diffrent see how inputs are transformed into actions.
                       
SubSystems :instead of overiding engine classes , SubSystems allows to work with instances directly.
                       Pawn/Charachter: Physical body of everything that performs actions and has behaviour . Can be possed by controller and perform its commands.
                       InputComponent: Dispatches player input to any designated listner The Input can be setup by player ID
                       

Ticking:  flex config  to update things , happens every frame of couple of frames or group of frames . 

Replication: network system . Its based on onwer ship , can replicate both Actors or properties , based on reliablity .
                              hook to events to actions 
                              
                              OwnerShip: 
                              Property Replication:
                              RPC:
                              Actor Replication:
                              Reliablity:
                              
                              

Extra:                        
Damage Sysytem , Movement Components for example to move charachters                       
Async Tasking : System to create Task that are processed async, good for saving files on disk or making best out of cpu .e.g save the game
Delegates And Evnets: C++ code & BP  can recive and broadcast them . Most basic form is DECLARE_DELEGATE

LIV++ : Real time compiler 




UI Automation  Tools :
Build -> Cook -> On the fly/ Cook by the book. -> Pack -> 
All this ghooks into Debug/Profileing tool: Stats, Console commands, Unreal insigts  , mem profile , LLM Low level mem accurate vision of what things are loaded in memory, ProfileGpu 




Programming Advice: Tips, Tricks Do Donts 
Start with BP to understand structure  engine , framework classes, 
Project Structure: 
  Modules: Divide code in module based on func , migrate to new prject etc 
  Compiliong Times LIV++: Aloow LIV++ compiles as you chnage.
  Plugins: 
  Changes to Engine: avoid in general 
  Sharing Files & Folders: e.g  content , source 
  DLL & CIS: bins compiled and uploaded to src control , only be uploaded by CIS , programmers.
  Platform Extentions:  nice way to work on code for specific platform make engine /project agnoustic to 

Text & Localization 
FText Localization : anything that needs to be displayed . 
Localize dialogs , textures, materials , sounds 

Specifiers: 
    BlueprintPure: that will tranform func to a pure BP func that means we dont need flow to call , usually for constant function 
    BlueprintType: Structure to be breakable and see all variable of in the tsrurecture  
    EditlineNew/ Instanced : will allow you to display in editor , instead of having to have an asset and the nassign it to refrence , will allow an instance version of the class.
    CallinEditor: 
    
    
Actor Ticking: Avoid ticking as much as you can. et the tick by default to false so no BP will tick.
              Only they mark as enable will tick.
              Tick has an overhead. So allow Manager will tick do lot of things to lot of actors better than having all those actors ticking. Better to group  
              Try to change tick rate if its not necessory have the tick every frame.


EXPERT TIPS & TRICKS : 
GameplayFramework: 
Set it up in BP and C++ 
GameInstance: use when you have to store info has to survive levels
Several PlayControllers: can have severall , swap between PlayerController 
Pawn Vs Charachter:  Charachter shd be anything that is a pawn also has a skeleton  mesh movement component like animal , robots , humanioids. movable parts like bone sthen has to be charachter. Pawn = Small UFO flyeing obj.
 
Input Consuming: avaoid consuming inputs in BP so its easier to track who is consuming input. example if one of the BP takes input and eats it then you dont get in controllers so hell of a time. 
Player and Game States:

BP balance
Core = C++ 
Specific of level or Specific of prefab  = BP 
Events can link to both BP or C++. so they can communicate

Construction Helper: Eayiest way to get Reference to Assets but as soon as you load code that asset is loaded in mem . if that asset refrences other things that will also be loaded in memory. Alternative is Pointer to asset UAssetPtr  or TSubclassOf, TAssetSubclassOf Then you can stream in that assset to mem. Equivalent in BP is there 

Build,Cook, Pack
Backup Release Folder.

ProfilerDebuuging 
You can set a func to be only available  on development. DevelopmentOnly specifier . e.g Print String 
Use Exec Specifier that will create console command version of that function. 









              
              
              


  

